#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="08-13-2023"

# usage ////////////////////////////////////////////////////////////////////////
frobulator.process () {

	# catch PID of last command

	PID=$!

	seconds="0.25"

	ticker='/\'

	before="[${marker_spc}"
	after="${marker_spc}]"

	frobulator.pmt "${@}"

	prompt="${prompt_string[@]}"

	i=1

	while [ -d /proc/"${PID}" ]
	do
		if [ $# -le 1 ]
	then
		echo -n -e "\r${before} \b${ticker:i++%${#ticker}:1}${after}${marker_spc}${prompt}${marker_elp}\c"
	else
		echo -n -e "\r${before} \b${ticker:i++%${#ticker}:1}${after}${marker_spc}${prompt}\c"
	fi

		sleep "${seconds}"
	done

	echo

	# normalize line spacing:
	# additional 'echo' required due to carriage return

	echo
}

frobulator.progress () {

	# catch PID of last command

	PID=$!

	seconds="0.25"

	ticker='⎺⎻⎼⎽⎼⎻'

	before="[${marker_spc}"
	after="${marker_spc}]"

	notification=("${@}")

	# dictionaries

	magenta_list=(
		download
	)

	magenta_list=(
		upload
	)

	blue_list=(
		install
	)

	blue_list=(
		reinstall
	)

	red_list=(
		remove
	)

	crimson_list=(
		purge
	)

	yellow_list=(
		update
		clone
	)

	orange_list=(
		upgrade
	)

	aqua_list=(
		hold
	)

	teal_list=(
		release
		build
	)

	black_list=(
		clean
	)

	green_list=(
		parse
	)

	lime_list=(
		generate
	)

	silver_list=(
		evaluate
		probe
	)

	grey_list=(
		process
	)

	# process alphabetical arguments only

	if [[ "${notification}" =~ [a-zA-Z] ]]
	then
		if [[ ${magenta_list[*]} =~ "${notification}" ]]
		then
			color="${magenta}"

		elif [[ ${purple_list[*]} =~ "${notification}" ]]
		then
			color="${purple}"

		elif [[ ${blue_list[*]} =~ "${notification}" ]]
		then
			color="${blue}"

		elif [[ ${navy_list[*]} =~ "${notification}" ]]
		then
			color="${navy}"

		elif [[ ${red_list[*]} =~ "${notification}" ]]
		then
			color="${red}"

		elif [[ ${crimson_list[*]} =~ "${notification}" ]]
		then
			color="${crimson}"

		elif [[ ${yellow_list[*]} =~ "${notification}" ]]
		then
			color="${yellow}"

		elif [[ ${orange_list[*]} =~ "${notification}" ]]
		then
			color="${orange}"

		elif [[ ${aqua_list[*]} =~ "${notification}" ]]
		then
			color="${aqua}"

		elif [[ ${teal_list[*]} =~ "${notification}" ]]
		then
			color="${teal}"

		elif [[ ${black_list[*]} =~ "${notification}" ]]
		then
			color="${black}"

		elif [[ ${green_list[*]} =~ "${notification}" ]]
		then
			color="${green}"

		elif [[ ${lime_list[*]} =~ "${notification}" ]]
		then
			color="${lime}"

		elif [[ ${silver_list[*]} =~ "${notification}" ]]
		then
			color="${silver}"

		elif [[ ${grey_list[*]} =~ "${notification}" ]]
		then
			color="${grey}"

		fi
	fi

	if [ -z "${notification}" ]
	then
		# set fallback for empty input notification

		notification="frobulate"

		color="${white}"
	fi

	# select notification index for transformation

	notification=${notification[0]}

	# set notification to first letter uppercase

	notification="${notification^}"

	if [ $# -le 1 ]
	then
		if [ "${notification: -1}" = "e" ]
		then
			notification="${notification/%e/ing$marker_elp}"
		else
			notification="${notification/%/ing$marker_elp}"
		fi
	fi

	if [ $# -ge 2 ]
	then
		if [ "${notification: -1}" = "e" ]
		then
			notification="${notification/%e/ing}"
		else
			notification="${notification/%/ing}"

		fi
	fi

	notification[0]="${notification}"

	frobulator.pmt ${notification[@]}

	prompt="${prompt_string[@]}"

	i=1

	while [ -d /proc/"${PID}" ]
	do
		if [ ! -d /proc/"${PID}" ]
        then
			break
        fi

		echo -n -e "\r${before}${color} \b${ticker:i++%${#ticker}:1}${reset}${after}${marker_spc}${prompt}\c"

		sleep "${seconds}"
	done

	unset color

	echo

	# normalize line spacing:
	# additional 'echo' required due to carriage return

	echo
}

frobulator.download () {

	url="${1}"

	frobulator.status "${url}"

	if [[ "${url_status}" = [0145][0-9][0-9] ]]
	then
		frobulator.err "Error" "[ Status // ${url_status} ]"
		echo

	elif [[ "${url_status}" = [23][0-9][0-9] ]]
	then
		frobulator.scs "Found" "[ Status // ${url_status} ]"
		echo

		if [ $# -eq 2 ]
		then
			path="${PWD}"

			if [[ -n "${#list[@]}" ]]
			then
				# ${2} - array

				list=(${@:2})
			else
				file="${2}"

				list=()

				list+=("${file}")
			fi
		elif [ $# -eq 3 ]
		then
			path="${2}"

			if [[ -n "${#list[@]}" ]]
			then
				# ${3} - array

				list=(${@:3})
			else
				file="${3}"

				list=()

				list+=("${file}")
			fi

		elif [ $# -eq 4 ]
		then
			source_file="${2}"
			path="${3}"

			if [ -z "${path}" ]
			then
				path="${PWD}"
			fi

			if [[ -n "${#list[@]}" ]]
			then
				# ${4} - array

				list=(${@:4})
			else
				file="${4}"

				list=()

				list+=("${file}")
			fi
		else
			path="${2}"

			if [ -z "${path}" ]
			then
				path="${PWD}"
			fi

			if [[ -n "${#list[@]}" ]]
			then
				# ${3} - array

				list=(${@:3})
			else
				file="${3}"

				list=()

				list+=("${file}")
			fi
		fi

		if [ ! -d "${path}" ]
		then
			mkdir -p "${path}"
		fi

		for file in ${list[@]}
		do
			if [ $# -eq 2 ]
			then
				curl			\
					--silent	\
					--location	"${url}" > "${path}"/"${file}" &

			elif [ $# -eq 3 ]
			then
				curl			\
					--silent	\
					--location	"${url}"/"${file}" > "${path}"/"${file}" &

			elif [ $# -eq 4 ]
			then
				curl			\
					--silent	\
					--location	"${url}"/"${source_file}" > "${path}"/"${file}" &

			else
				curl			\
					--silent	\
					--location	"${url}"/"${file}" > "${path}"/"${file}" &
			fi

			frobulator.progress "download" "[ '${file}' ]"

			chmod a+rx "${path}"/"${file}"
		done

		# unset array

		list=()

	else
		frobulator.err "Status unknown" "[ Status // N/A ]"
	fi
}

# variables ////////////////////////////////////////////////////////////////////

frobulator.inf "Test line 1 - information"
frobulator.nul "Test line 2"
echo

frobulator.msg "Test line 1 - message"
frobulator.nul "Test line 2"
echo

frobulator.add "Test line 1 - add"
frobulator.nul "Test line 2"
echo

frobulator.rem "Test line 1 - remove"
frobulator.nul "Test line 2"
echo

frobulator.ret "Test line 1 - retain"
frobulator.nul "Test line 2"
echo

frobulator.rel "Test line 1 - release"
frobulator.nul "Test line 2"
echo

frobulator.fwd "Test line 1 - forward"
frobulator.nul "Test line 2"
echo

frobulator.rev "Test line 1 - reverse"
frobulator.nul "Test line 2"
echo

frobulator.stp "Test line 1 - stop"
frobulator.nul "Test line 2"
echo

frobulator.dwl "Test line 1 - download"
frobulator.nul "Test line 2"
echo

frobulator.upl "Test line 1 - upload"
frobulator.nul "Test line 2"
echo

frobulator.lnk "Test line 1 - link"
frobulator.nul "Test line 2"
echo

frobulator.scs "Test line 1 - success"
frobulator.nul "Test line 2"
echo

frobulator.wrn "Test line 1 - warning"
frobulator.nul "Test line 2"
echo

frobulator.err "Test line 1 - error"
frobulator.nul "Test line 2"
echo

frobulator.ins "Test line 1 - insert"
frobulator.nul "Test line 2"
echo

frobulator.ask "Test line 1 - question"
frobulator.nul "Test line 2"
echo

frobulator.ipt "Test line 1 - input"
frobulator.nul "Test line 2"
echo

frobulator.usr "Test line 1 - user"
frobulator.nul "Test line 2"
echo

frobulator.separate

frobulator.white "white"
frobulator.silver "silver"
frobulator.grey "grey"
frobulator.black "black"
echo

frobulator.red "red"
frobulator.crimson "crimson"
echo

frobulator.green "green"
frobulator.lime "lime"
echo

frobulator.yellow "yellow"
frobulator.orange "orange"
echo

frobulator.blue "blue"
frobulator.navy "navy"
echo

frobulator.magenta "magenta"
frobulator.purple "purple"
echo

frobulator.fuschia "fuschia"
frobulator.pink "pink"
echo

frobulator.aqua "aqua"
frobulator.teal "teal"
echo

if [ -z "${utility}" ]
then
	utility="all"
fi



utility_intent () {

	# load dextop utilities

	utilities_list+=(
		termux-packages
		termux-repositories
		termux-update
		termux-storage
		termux-additions
		container-expansion
		container-image
		container-packages
		container-repositories
		container-session
		container-settings
		container-user
	)

	if [[ ${utilities_list[@]} =~ "${utility}" ]]
	then
		frobulator.download get.dxtp.app "${HOME}"/.local/bin "${utility}"

	elif [[ "${utility}" = "all" ]]
	then
		frobulator.download get.dxtp.app "${HOME}"/.local/bin ${utilities_list[@]}

	else
		frobulator.err "Unknown utility name" "[ ${utility} ]"
		echo

		frobulator.msg "Known upgradable utilities" "[ version // ${version} ]"
		echo

		IFS=$'\n'

		printf "[ > ] %s\n" ${utilities_list[@]}

		echo

		IFS=''

		frobulator.msg "Option: update all utilities using 'all' argument."
		echo

		frobulator.inf "Review utility name spelling and try again."
		echo

		exit 1
	fi

	utilities_list=()
}

utility_intent
