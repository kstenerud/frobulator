#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="08-13-2023"

# usage ////////////////////////////////////////////////////////////////////////
# line markers /////////////////////////////////////////////////////////////////

marker_top='[ ‚ñ≥ ]'
marker_bot='[ ‚ñΩ ]'

marker_fwd='[ ‚ñ∑ ]'
marker_rev='[ ‚óÅ ]'
marker_stp='[ ‚ñ° ]'

marker_add='[ + ]'
marker_rem='[ - ]'

marker_ret='[ ‚óè ]'
marker_rel='[ ‚óã ]'

marker_ask='[ ? ]'
marker_inf='[ i ]'
marker_wrn='[ ! ]'

marker_ipt='[ > ]'
marker_msg='[ # ]'
marker_usr='[ ~ ]'

marker_yes='[ ‚úì ]'
marker_not='[ êÑÇ ]'

marker_nul='     '

# special case markers /////////////////////////////////////////////////////////

marker_sep='//////'

marker_elp='...'
marker_idt='      '
marker_prc='%'
marker_spc=' '

# prompt management tool (pmt) /////////////////////////////////////////////////

# prompt management and standardizing with 80 charcters width:
# adds line folding with word detection for strings over 80 characters long

frobulator.pmt () {

	# initialize string return array

	prompt_string=()

	# define input arguments

	begin="${1}"
	end="${2}"

	# provide fallback for line character count

	if [ -z "${count}" ]
	then
		count=${terminal_columns}
	fi

	# set span width

	if [ ${#begin} -le "${count}" ]
	then
		span="--------------------------------------------------------------------------------"
	else
		span=""
	fi

	# set span character default:
	# cannot use '\' character as span //////////////////////////////// FIX ME #

	span_character="/"

	# prepare span for line marker usage:
	# [   ] --------------------------------------------------------------------------

	# span=${span::-6} //////////////////////////////////////////////// FIX ME #


	# 3 arguments - replace span character with argument 3

	if [ $# -eq 3 ]
	then
		span_character="${3}"
		span_character_length=${#span_character}

		# if span character length greater than 2:
		# compensate by dividing to achieve 80 characters total span

		if [ ${span_character_length} -ge 2 ]
		then
			count=$((${count} / ${span_character_length}))

			span_length=${count}
		fi
	fi
	span_length=${#span}

	# 2+ arguments:
	# append space to 'begin' value
	# prepend space to 'end' value

	if [ $# -ge 2 ]
	then
		begin="${begin} "
		end=" ${end}"
	fi

	# define parsing calculation lengths

	begin_length=${#begin}
	end_length=${#end}

	# 75+ characters per string:
	# fold string using word detection at limit
	# to prevent overstepping 80 characters overall limit
	# indent second line onward (6 spaces) to match line marker
	# detect newline character and indent onward (6 spaces) to match line marker

	margin=5

	fold=$(( "${count}" - "${margin}" ))

	if [ "${begin_length}" -ge "${fold}" ]
	then
		begin=$(echo "${begin}" | fold -s -w "${fold}" | sed -e '2,$'"s/^/${marker_idt}/g" | sed -e 's/ \\n /\\n\n      /g')
	fi


	# substitute span character

	span="${span//-/$span_character}"

	# print first argument:
	# remove newline for continuous string arguments

	span_begin=$(echo -n -e "${begin}")

	# print other arguments as fixed width prompt if present:
	# calculate span width - remove 6 characters for prompt header

	span_count=$(( ${span_length} - ${begin_length} - ${end_length} ))

	# set new padding width

 	if [ ${begin_length} -lt "${count}" ]
 	then
 		span=${span:0:$span_count}
 	else
 		span=""
 	fi

 	# define user input aor automatic fill

	span_middle="${span}"

	# print last argument:
	# carry newline and jump to next block

	span_end=$(echo -e "${end}")

	# populate array at end to avoid integrating spaces

	if [ $# -ge 0 ]
	then
		prompt_string=("${span_begin}""${span_middle}""${span_end}")
	fi

	if [ $# -eq 1 ]
	then
		prompt_string=("${span_begin}")
	fi

	if [ $# -ge 2 ]
	then
		prompt_string=("${span_begin}""${span_middle}""${span_end}")
	fi

	if [ $# -eq 3 ]
	then
		prompt_string=("${span_begin}""${span_middle}""${span_end}")
	fi

	# reset line elements

	unset begin
	unset end
	unset span
	unset count
}

# variables ////////////////////////////////////////////////////////////////////

frobulator.inf "Test line 1 - information"
frobulator.nul "Test line 2"
echo

frobulator.msg "Test line 1 - message"
frobulator.nul "Test line 2"
echo

frobulator.add "Test line 1 - add"
frobulator.nul "Test line 2"
echo

frobulator.rem "Test line 1 - remove"
frobulator.nul "Test line 2"
echo

frobulator.ret "Test line 1 - retain"
frobulator.nul "Test line 2"
echo

frobulator.rel "Test line 1 - release"
frobulator.nul "Test line 2"
echo

frobulator.fwd "Test line 1 - forward"
frobulator.nul "Test line 2"
echo

frobulator.rev "Test line 1 - reverse"
frobulator.nul "Test line 2"
echo

frobulator.stp "Test line 1 - stop"
frobulator.nul "Test line 2"
echo

frobulator.dwl "Test line 1 - download"
frobulator.nul "Test line 2"
echo

frobulator.upl "Test line 1 - upload"
frobulator.nul "Test line 2"
echo

frobulator.lnk "Test line 1 - link"
frobulator.nul "Test line 2"
echo

frobulator.scs "Test line 1 - success"
frobulator.nul "Test line 2"
echo

frobulator.wrn "Test line 1 - warning"
frobulator.nul "Test line 2"
echo

frobulator.err "Test line 1 - error"
frobulator.nul "Test line 2"
echo

frobulator.ins "Test line 1 - insert"
frobulator.nul "Test line 2"
echo

frobulator.ask "Test line 1 - question"
frobulator.nul "Test line 2"
echo

frobulator.ipt "Test line 1 - input"
frobulator.nul "Test line 2"
echo

frobulator.usr "Test line 1 - user"
frobulator.nul "Test line 2"
echo

frobulator.separate

frobulator.white "white"
frobulator.silver "silver"
frobulator.grey "grey"
frobulator.bla ck "bla ck"
echo

frobulator.red "red"
frobulator.crimson "crimson"
echo

frobulator.green "green"
frobulator.lime "lime"
echo

frobulator.yellow "yellow"
frobulator.orange "orange"
echo

frobulator.blue "blue"
frobulator.navy "navy"
echo

frobulator.magenta "magenta"
frobulator.purple "purple"
echo

frobulator.fuschia "fuschia"
frobulator.pink "pink"
echo

frobulator.aqua "aqua"
frobulator.teal "teal"
echo

frobulator.inf "test1" "[ test2 ]"

frobulator.inf "test1" "[ test2 ]" "++"

frobulator.inf "test1" "[ test2 ]" z


frobulator.nul "bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla \n bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla \n bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla \n bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla \n bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla "
echo
